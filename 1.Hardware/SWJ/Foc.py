# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import matplotlib.pyplot as plt
import sys, os
from math import radians, cos, sin, asin, sqrt  
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow
import serial #导入模块
import serial.tools.list_ports
import threading
import time
from tkinter import *
from tkinter import filedialog
from PyQt5.QtCore import *
from datetime import datetime
from tkinter import messagebox
from tkinter import *
import tkinter.colorchooser as cc    #给导入的包指定一个别名
from PyQt5 import QtCore, QtGui, QtWidgets
import Usart


class Worker(QThread):
    sinOut = pyqtSignal(bytes) # 自定义信号，执行run()函数时，从相关线程发射此信号
    def __init__(self, parent=None):
        super(Worker, self).__init__(parent)
        self.working = True
        self.num = 0
        self.Usart=Usart.Usart()
        
    def __del__(self):
        self.working = False
        self.wait()

    def run(self):
        while self.working == True:
            try:
                if self.Usart.ser.in_waiting:
                    read_ok=1
                    BUF=self.Usart.ser.read(self.Usart.ser.in_waiting)
                else:
                    time.sleep(0.02)
                    read_ok=0
            except Exception as e:
                pass
        #如果有数据
            if read_ok==1:
                STRGLO=BUF
                self.sinOut.emit(STRGLO)
            # 线程休眠2秒
            
            
    def Usart_init(self,com,bit):
        self.Usart.Usart_init(com,bit)

    def Usart_Close(self):
        self.Usart.ser.close()

    def Usart_Sedn(self,dat):
        self.Usart.Usart_Send(dat)




class Ui_Form(QMainWindow):
    def __init__(self):
        super(Ui_Form,self).__init__()
    def ui_set(self):
        self.setupUi(self)

    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(641, 498)
        self.pushButton_OPEN = QtWidgets.QPushButton(Form)
        self.pushButton_OPEN.setGeometry(QtCore.QRect(430, 30, 75, 23))
        self.pushButton_OPEN.setObjectName("pushButton_OPEN")
        self.dial = QtWidgets.QDial(Form)
        self.dial.setGeometry(QtCore.QRect(110, 160, 61, 81))
        self.dial.setObjectName("dial")
        self.dial_2 = QtWidgets.QDial(Form)
        self.dial_2.setGeometry(QtCore.QRect(200, 160, 61, 81))
        self.dial_2.setObjectName("dial_2")
        self.comboBox = QtWidgets.QComboBox(Form)
        self.comboBox.setGeometry(QtCore.QRect(350, 30, 69, 22))
        self.comboBox.setObjectName("comboBox")
        self.pushButton = QtWidgets.QPushButton(Form)
        self.pushButton.setGeometry(QtCore.QRect(520, 170, 51, 23))
        self.pushButton.setObjectName("pushButton")
        self.lineEdit_PWM = QtWidgets.QLineEdit(Form)
        self.lineEdit_PWM.setGeometry(QtCore.QRect(520, 140, 51, 20))
        self.lineEdit_PWM.setObjectName("lineEdit_PWM")
        self.lineEdit_Speed = QtWidgets.QLineEdit(Form)
        self.lineEdit_Speed.setGeometry(QtCore.QRect(160, 240, 51, 20))
        self.lineEdit_Speed.setObjectName("lineEdit_Speed")
        self.pushButton_CLOSE = QtWidgets.QPushButton(Form)
        self.pushButton_CLOSE.setGeometry(QtCore.QRect(510, 30, 75, 23))
        self.pushButton_CLOSE.setObjectName("pushButton_CLOSE")
        self.label_PWM = QtWidgets.QLabel(Form)
        self.label_PWM.setGeometry(QtCore.QRect(470, 140, 51, 16))
        self.label_PWM.setObjectName("label_PWM")
        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.pushButton_OPEN.setText(_translate("Form", "打开串口"))
        self.pushButton.setText(_translate("Form", "发送"))
        self.pushButton_CLOSE.setText(_translate("Form", "关闭串口"))
        self.label_PWM.setText(_translate("Form", "设置PWM:"))
        
        self.dial.setRange(0,4000)           #设置范围
        self.dial.setNotchesVisible(True)    #设置刻度
        self.dial.setPageStep(10)            #翻页步长
        self.dial.setWrapping(True)          #刻度不留缺口
        self.dial.setNotchTarget(50)         #设置刻度密度，即单位刻度所代表的大小

          
        self.dial_2.setRange(0,4000)           #设置范围
        self.dial_2.setNotchesVisible(True)    #设置刻度
        self.dial_2.setPageStep(10)            #翻页步长
        self.dial_2.setWrapping(True)          #刻度不留缺口
        self.dial_2.setNotchTarget(50)         #设置刻度密度，即单位刻度所代表的大小

        self.COM=Usart.Usart()
        self.nub= self.COM.find()
        print('com',self.nub)
        self.comboBox.addItems(self.nub)
        self.pushButton_OPEN.clicked.connect(self.Usart_OPEN)
        self.pushButton_CLOSE.clicked.connect(self.Usart_Close)
        self.pushButton.clicked.connect(self.Usart_Send)
        #构建界面
        self.root = Tk() 
        #隐藏TK窗口
        self.root.withdraw() 
    
    def Usart_Send(self):

        dat=self.lineEdit_PWM.text()
        list=bytes.fromhex('AA 02 01') 
        dat=int(dat)
        data_byte = dat.to_bytes(1, byteorder='little', signed=True)
        send_dat=list+data_byte
        #print(send_dat)
        self.thread.Usart_Sedn(send_dat)

    def Usart_Close(self):
        self.thread.Usart_Close()
        self.pushButton_OPEN.setText("打开串口")
        self.pushButton_CLOSE.setText("已关闭")
    
    def Usart_OPEN(self):
        self.pushButton_OPEN.setText("已打开")
        self.pushButton_CLOSE.setText("关闭串口")
        com=self.comboBox.currentText()
        bit=115200
        print("打开=",com,bit)
        self.thread = Worker()
        self.thread.Usart_init(com,bit)
        self.thread.start()
        self.thread.sinOut.connect(self.slotAdd)

    def slotAdd(self, file_inf):
        global reset_cnt,cf_cnt,dt_cnt,lbs_cnt
        #print(file_inf)
        string=file_inf.decode('utf-8','ignore')
        try:
            if(file_inf[0]==170):
                if(file_inf[1]==1):
                    val=file_inf[3]*256+file_inf[4]
                    if(val>0):
                        #print(val,file_inf[5])
                        self.dial_2.setValue(val)
                        self.dial.setValue(val)
                        if(file_inf[5]!=0):
                            self.lineEdit_Speed.setText(str(file_inf[5]))
                if(file_inf[1]==0):
                    if(file_inf[2]==0):
                        messagebox.showinfo("提示","设置成功")
                    
        except:  
            #print(file_inf)
            pass
        


        if(string.find("=")>0):
            try:
                pass
                val=int(string[4:])
                print(val)
                self.dial_2.setValue(val)
                self.dial.setValue(val)
            except  :
                pass
           
#STM32F10X_HD,USE_STDPERIPH_DRIVER



    def test(self,val):
        #self.dial_2.set
        self.dial_2.setValue(val)
        print(val)


     

    



if __name__ == '__main__':
    app = QApplication(sys.argv)
    ui=Ui_Form()
    ui.ui_set()
    ui.show()
    sys.exit(app.exec_())